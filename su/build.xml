<?xml version="1.0" encoding="utf-8"?>
<project name="su" default=".help">
    <!--
    The build-impl.xml file imported here contains the guts of the build process. It is
    a great idea to read that file to understand how the process works, but it is best to
    limit your changes to this file.
    -->
    <script language="javascript">
        <![CDATA[
            var dir = project.getProperty("basedir"),
                cmdDir = project.getProperty("cmd.dir"),
                cmdLoaded = project.getReference("senchaloader");
            
            if (!cmdLoaded) {
                function echo(message, file) {
                    var e = project.createTask("echo");
                    e.setMessage(message);
                    if (file) {
                        e.setFile(file);
                    }
                    e.execute();
                };

                if (!cmdDir) {
                    
                    function exec(args) {
                        var process = java.lang.Runtime.getRuntime().exec(args),
                            input = new java.io.BufferedReader(new java.io.InputStreamReader(process.getInputStream())),
                            headerFound = false,
                            line;

                        while (line = input.readLine()) {
                            line = line + '';
                            java.lang.System.out.println(line);
                            if (line.indexOf("Sencha Cmd") > -1) {
                                headerFound = true;
                            }
                            else if (headerFound && !cmdDir) {
                                cmdDir = line;
                                project.setProperty("cmd.dir", cmdDir);
                            }
                        }
                        process.waitFor();
                        return !!cmdDir;
                    }
                    
                    if (!exec(["sencha", "which"])) {
                        var tmpFile = "tmp.sh";
                        echo("source ~/.bash_profile; sencha " + whichArgs.join(" "), tmpFile);
                        exec(["/bin/sh", tmpFile]);
                        new java.io.File(tmpFile)['delete'](); 
                    }
                }
            }
            
            if (cmdDir && !project.getTargets().containsKey("init-cmd")) {
                var importTask = project.createTask("import");
                importTask.setOwningTarget(self.getOwningTarget());
                importTask.setLocation(self.getLocation());
                importTask.setFile(cmdDir + "/ant/build/package/build-impl.xml");
                importTask.execute();
            }
        ]]>
    </script>

    <!--
    The following targets can be provided to inject logic before and/or after key steps
    of the build process:

        The "init-local" target is used to initialize properties that may be personalized
        for the local machine.

            <target name="-before-init-local"/>
            <target name="-after-init-local"/>

        The "clean" target is used to clean build output from the build.dir.

            <target name="-before-clean"/>
            <target name="-after-clean"/>

        The general "init" target is used to initialize all other properties, including
        those provided by Sencha Cmd.

            <target name="-before-init"/>
            <target name="-after-init"/>
        
        The "build" target performs the call to Sencha Cmd to build the application.

            <target name="-before-build"/>
            <target name="-after-build"/>
    -->

    <target name="-before-init" depends="save-version-json">
        <!--
        <property name="pkg.excludes"
                  value="examples/**/*,
                         welcome/**/*,
                         build/welcome/**/*,
                         build/classic/**/*,
                         build/modern/**/*,
                         build/packages/**/*,
                         build/index.html,
                         release-notes-*,
                         build/temp/**/*,
                         build/examples/**/*,
                         ext-all*.js,
                         ext-debug.js,
                         ext.js,
                         ext-modern*.js,
                         packages/*/test/**/*,
                         test_internal/**/*,
                         bootstrap*.js"/>
        -->

        <!--
        <condition property="repo.dev.mode" value="true">
            <available file="${basedir}/../attic" type="dir"/>
        </condition>
        <if>
           <available file="${basedir}/../attic" type="dir"/>
           <then>
		        <x-echo>repo.dev.mode</x-echo>
           </then>
        </if>
        -->
    </target>

    <target name="-after-init" depends="apply-production-settings"/>

    <!--target name="detect-git-hash" if="repo.dev.mode">
        <x-git-current-hash property="git.current.hash"/>
    </target-->

    <!--
    Инициализация свойсва package.dir при его отсутствии для выполнения команд
        sencha ant docs
        sencha ant bump
        
    Установка свойства version.unskip.upgrade - не пропускать обновления версии
    -->
    <target name="init-packagedir-version-properties" unless="package.dir">
        <condition property="version.unskip.upgrade" value="true" else="false">
            <isset property="package.dir"/>
        </condition>
        <property name="package.dir" value="${basedir}"/>
    </target>

    <!--
    Установка свойств
        version.file - файл "version.properties"
        version.exists - наличие файла
    -->
    <target name="init-filename-version-properties" depends="init-packagedir-version-properties">
        <property name="version.file" value="${package.dir}/version.properties"/>
        <condition property="version.exists" value="true" else="false">
            <available file="${version.file}" type="file"/>
        </condition>
    </target>

    <!--
    Создание файла "version.properties" при его отсутствии
    -->
    <target name="default-version-properties" unless="${version.exists}" depends="init-filename-version-properties">
        <property name="version.major" value="1"/>
        <property name="version.minor" value="0"/>
        <property name="version.patch" value="1"/>
        <property name="version.build" value="103"/>

        <propertyfile file="${version.file}">
            <entry operation="="
                   key="version.major"
                   value="${version.major}"/>
            <entry operation="="
                   key="version.minor"
                   value="${version.minor}"/>
            <entry operation="="
                   key="version.patch"
                   value="${version.patch}"/>
            <entry operation="="
                   key="version.build"
                   value="${version.build}"/>
            <entry operation="="
                   key="version.release"
                   value="${version.major}.${version.minor}.${version.patch}"/>
            <entry operation="="
                   key="version.full"
                   value="${version.major}.${version.minor}.${version.patch}.${version.build}"/>
        </propertyfile>
    </target>

    <!--
    Инкремент номера сборки в файле version.properties
    -->
    <target name="upgrade-build-version" depends="default-version-properties" unless="version.unskip.upgrade">
        <propertyfile file="${version.file}">
            <entry key="version.build" type="int" operation="+" value="1"/>
        </propertyfile>
    </target>

    <!--
    Загрузка свойств версий
    -->
    <target name="load-version-properties">
        <property file="${version.file}"/>
        <condition property="version.exists" value="true">
            <available file="${version.file}" type="dir"/>
        </condition>
    </target>
    
    <target name="generate-version-properties" depends="upgrade-build-version,load-version-properties,init-version-properties" unless="version.unskip.upgrade">

        <x-echo>=========================================</x-echo>
        <x-echo>${version.full} -> ${prg.version.full}</x-echo>
        <x-echo>=========================================</x-echo>

        <propertyfile file="${version.file}">
            <entry operation="="
                   key="version.major"
                   value="${version.major}"/>
            <entry operation="="
                   key="version.minor"
                   value="${version.minor}"/>
            <entry operation="="
                   key="version.patch"
                   value="${version.patch}"/>
            <entry operation="="
                   key="version.build"
                   value="${version.build}"/>
            <entry operation="="
                   key="version.release"
                   value="${prg.version.release}"/>
            <entry operation="="
                   key="version.full"
                   value="${prg.version.full}"/>
        </propertyfile>
    </target>

    <target name="init-version-properties" depends="load-version-properties">
        <property name="prg.version.release" value="${version.major}.${version.minor}.${version.patch}"/>
        <property name="prg.version.full" value="${prg.version.release}.${version.build}"/>
    </target>

    <target name="save-version-json" depends="generate-version-properties" unless="version.unskip.upgrade">
        <replaceregexp match="&quot;version&quot;: &quot;(\d+.\d+.\d+(.\d+)*)&quot;," replace="&quot;version&quot;: &quot;${prg.version.full}&quot;," flags="g" byline="true">
            <fileset dir="${package.dir}" includes="**/package.json"/>
        </replaceregexp>
        <replaceregexp match="&quot;compatVersion&quot;: &quot;(\d+.\d+.\d+)&quot;," replace="&quot;compatVersion&quot;: &quot;${prg.version.release}&quot;," flags="g" byline="true">
            <fileset dir="${package.dir}" includes="**/package.json"/>
        </replaceregexp>
        <replaceregexp match="&quot;version&quot;: &quot;(\d+.\d+.\d+(.\d+)*)&quot;," replace="&quot;version&quot;: &quot;${prg.version.full}&quot;," flags="g" byline="true">
            <fileset dir="${package.dir}" includes="**/app.json"/>
        </replaceregexp>
        <replaceregexp match="&quot;compatVersion&quot;: &quot;(\d+.\d+.\d+)&quot;," replace="&quot;compatVersion&quot;: &quot;${prg.version.release}&quot;," flags="g" byline="true">
            <fileset dir="${package.dir}" includes="**/app.json"/>
        </replaceregexp>
    </target>

    <target name="-full-bump" if="set.version.full">
        <echo message="set version full" />
        <var name="index" value="0"/>
        <var name="part0" value="major"/>
        <var name="part1" value="minor"/>
        <var name="part2" value="patch"/>
        <var name="part3" value="build"/>
        <for list="${version}" delimiter="." param = "val">
            <sequential>
                <var name="part" value="$${part${index}}" />
                <property name="new.version.${part}"  value="@{val}"/>
                <math result="index" operand1="${index}" operation="+" operand2="1" datatype="int" />
            </sequential>
        </for>
        <property name="new.version.patch" value="0"/>
        <property name="new.version.build" value="0"/>
    </target>

    <target name="-only-bump" depends="upgrade-build-version,load-version-properties" if="set.version.bump">
        <echo message="set version bump" />
        <var name="ver.patch" value="${version.patch}"/>
        <math result="ver.patch" operand1="${ver.patch}" operation="+" operand2="1" datatype="int" />
        <property name="new.version.major" value="${version.major}"/>
        <property name="new.version.minor" value="${version.minor}"/>
        <property name="new.version.patch" value="${ver.patch}"/>
        <property name="new.version.build" value="0"/>
    </target>

    <target name="-init-bump">
        <condition property="set.version.full" value="true">
            <isset property="version"/>
        </condition>
        <condition property="set.version.bump" value="true">
            <not>
                <isset property="version"/>
            </not>
        </condition>
        <echo message="${set.version.full}" />
        <echo message="${set.version.bump}" />
        <echo message="${version}" />
    </target>

    <target name="bump" depends="init,-init-bump,-full-bump,-only-bump">
        <echoproperties prefix="new.version" />

        <property name="prg.version.release" value="${new.version.major}.${new.version.minor}.${new.version.patch}"/>
        <property name="prg.version.full" value="${prg.version.release}.${new.version.build}"/>

        <propertyfile file="${package.dir}/version.properties">
            <entry operation="="
                   key="version.major"
                   value="${new.version.major}"/>
            <entry operation="="
                   key="version.minor"
                   value="${new.version.minor}"/>
            <entry operation="="
                   key="version.patch"
                   value="${new.version.patch}"/>
            <entry operation="="
                   key="version.build"
                   value="${new.version.build}"/>
            <entry operation="="
                   key="version.release"
                   value="${prg.version.release}"/>
            <entry operation="="
                   key="version.full"
                   value="${prg.version.full}"/>
        </propertyfile>

        <replaceregexp match="&quot;version&quot;: &quot;(\d+.\d+.\d+(.\d+)*)&quot;," replace="&quot;version&quot;: &quot;${prg.version.full}&quot;," flags="g" byline="true">
            <fileset dir="${package.dir}" includes="**/package.json"/>
        </replaceregexp>
        <replaceregexp match="&quot;compatVersion&quot;: &quot;(\d+.\d+.\d+)&quot;," replace="&quot;compatVersion&quot;: &quot;${prg.version.release}&quot;," flags="g" byline="true">
            <fileset dir="${package.dir}" includes="**/package.json"/>
        </replaceregexp>
        <replaceregexp match="&quot;version&quot;: &quot;(\d+.\d+.\d+(.\d+)*)&quot;," replace="&quot;version&quot;: &quot;${prg.version.full}&quot;," flags="g" byline="true">
            <fileset dir="${package.dir}" includes="**/app.json"/>
        </replaceregexp>
        <replaceregexp match="&quot;compatVersion&quot;: &quot;(\d+.\d+.\d+)&quot;," replace="&quot;compatVersion&quot;: &quot;${prg.version.release}&quot;," flags="g" byline="true">
            <fileset dir="${package.dir}" includes="**/app.json"/>
        </replaceregexp>

    </target>

    <target name="set-build-production">
        <property name="build.production" value="1"/>

        <!--replace file="${basedir}/package.json"
                 token="&quot;local&quot;: true"
                 value="&quot;local&quot;: false"/-->
    </target>

    <target name="apply-production-settings" if="build.production">
        <!--<x-property-file file="${package.dir}/.sencha/package/sencha.cfg">-->
        <!--<entry type="string" key="skip.examples" operation="=" value="1"/>-->
        <!--</x-property-file>-->
    </target>

    <target name="build-examples-index">
        <copy todir="${build.dir}/examples/" overwrite="true">
            <fileset dir="${basedir}/examples/">
                <include name="index.html"/>
                <include name="main.css"/>
                <include name="main.js"/>
                <include name="examples.js"/>
            </fileset>
        </copy>

        <copy todir="${build.dir}/examples/resources/" overwrite="true">
            <fileset dir="${basedir}/examples/resources/" includes="**/*"/>
        </copy>
    </target>

    <target name="build-non-app-examples">
        <for param="example">
            <dirset dir="${package.dir}/examples/classic" includes="*"/>
            <sequential>
                <if>
                    <not>
                        <available file="@{example}/app.json"/>
                    </not>
                    <then>
                        <local name="example.name"/>
                        <basename property="example.name" file="@{example}"/>
                        <copy todir="${build.dir}/examples/classic/${example.name}" overwrite="true">
                            <fileset dir="@{example}" includes="**/*"/>
                        </copy>
                    </then>
                </if>
            </sequential>
        </for>
    </target>

    <target name="prep-build-folder" depends="init,build-examples-index,build-non-app-examples">
        <copy todir="${build.dir}/welcome" overwrite="true">
            <fileset dir="${basedir}/welcome"/>
        </copy>

        <copy file="${basedir}/index.html"
              tofile="${build.dir}/index.html"
              overwrite="true"/>
        <replace file="${build.dir}/index.html"
                 token="build/examples/classic/index.html"
                 value="examples/classic/index.html"/>
        <replace file="${build.dir}/examples/classic/shared/include-ext.js"
                 token="Ext.devMode = 2;"
                 value="Ext.devMode = 0;"/>
        <replace file="${build.dir}/examples/classic/shared/include-ext.js"
                 token="Ext.devMode = 1;"
                 value="Ext.devMode = 0;"/>
    </target>

    <target name="move-subpkgs-build">
        <x-echo>Move build sub packages ${subpkgs.packages}</x-echo>
        <delete file="${build.dir}/su.js"/>
        <delete file="${build.dir}/su-debug.js"/>
        
        <delete>
            <fileset dir="${workspace.packages.dir}/build" includes="**/*.scss"/>
        </delete>
        <delete>
            <fileset dir="${workspace.packages.dir}/build" includes="**/*.rb"/>
        </delete>

        <!--<move tofile="${workspace.build.dir}/pkgs/su.pkg">
            <fileset file="${workspace.build.dir}/su-classic/su-classic.pkg"/>
        </move>

        <move todir="${workspace.build.dir}/pkgs">
            <fileset file="${workspace.build.dir}/su-native/su-native.pkg"/>
        </move>

        <move todir="${workspace.build.dir}/pkgs">
            <fileset file="${workspace.build.dir}/material-icons/material-icons.pkg"/>
        </move>-->

        <!--<for list="su-classic,su-modern,su-native,material-icons" param="file">
            <sequential>
                <delete dir="${workspace.build.dir}/@{file}"/>
            </sequential>
        </for>-->

    </target>

    <target name="-before-pkg" depends="move-subpkgs-build">
        <if>
            <available file="${basedir}/release-notes.html"/>
            <then>
                <copy file="${basedir}/release-notes.html"
                      tofile="${build.dir}/release-notes.html"
                      overwrite="true"/>
            </then>
        </if>
    </target>

    <!--
    ******************************************
    
    ******************************************
    -->
    <target name="-after-pkg">
        <x-echo>${package.subpkgs.packages}</x-echo>

        <delete dir="${build.dir}/SU"/>
        
        <x-echo>Repository sets</x-echo>

        <for list="${package.subpkgs.packages}" param="file">
            <sequential>
                <x-sencha-command
                          dir="${workspace.build.dir}/pkgs"
                          inheritall="false">
                    package
                    add
                    ${workspace.build.dir}/pkgs/@{file}.pkg
                </x-sencha-command>
            </sequential>
        </for>

        <!--
        Копирование репозитория
        -->
        <copy todir="${workspace.dir}/deploy/repo">
            <fileset dir="${repo.local.dir}/pkgs" includes="**/*.*"/>
        </copy>
        
        <!--
        Новая версия в CDN
        -->
        <copy todir="${workspace.dir}/deploy/cdn/${prg.version.full}/">
            <fileset dir="${workspace.packages.dir}/build" includes="**/*.*"/>
        </copy>

        <!--
        cdn redirect
        -->
        <copy file="${basedir}/cdnredirect.html"
              tofile="${workspace.dir}/deploy/cdn/index.html"
              overwrite="true"/>
        <replace file="${workspace.dir}/deploy/cdn/index.html"
                 token="{version}"
                 value="${prg.version.full}"/>

        <!-- 
        Получение обновленного списка версий
        -->
        <var name="filelist.var" value= "" />
        <for param="versiondir">
            <dirset dir="${workspace.dir}/deploy/cdn/" includes="*"/>
            <sequential>
                <local name="versionname"/>
                <basename property="versionname" file="@{versiondir}"/>
                <var name="filelist.var" value= "${filelist.var}&lt;p&gt;&lt;a href=&quot;../${versionname}/index.html&quot;&gt;${versionname}&lt;/a&gt;&lt;/p&gt;" />
                <copy file="${basedir}/cdn.html" tofile="${workspace.dir}/deploy/cdn/${versionname}/index.html" overwrite="true"/>
                <replaceregexp
                    file ="${workspace.dir}/deploy/cdn/${versionname}/index.html"
                    match="&lt;title&gt;(\s|\S)*&lt;\/title&gt;"
                    replace="&lt;title&gt;${versionname}&lt;\/title&gt;"
                    byline="true"/>
                <replaceregexp
                    file ="${workspace.dir}/deploy/cdn/${versionname}/index.html"
                    match="&lt;header&gt;(\s|\S)*&lt;\/header&gt;"
                    replace="&lt;header&gt;&lt;h1&gt;${versionname}&lt;\/h1&gt;&lt;\/header&gt;"
                    byline="true"/>
            </sequential>
        </for>

        <!--
        Сортировка списка версий в обратном порядке
        -->
        <script language="javascript">
            <![CDATA[
                project.setProperty( "filelist", "<p>" + project.getProperty("filelist.var")
                    .toString().split("</p><p>").reverse().join("</p><p>") + "</p>");
            ]]>
        </script>

        <!-- 
        Замена обновленного списка версий во всех index.html
        -->
        <replaceregexp match="&lt;aside&gt;(\s|\S)*&lt;\/aside&gt;" replace="&lt;aside&gt;${filelist}&lt;\/aside&gt;" byline="true">
            <fileset dir="${workspace.dir}/deploy/cdn/" includes="**/index.html"/>
        </replaceregexp>

        <!--
        Проход по всем версиям и подкидывание файла index.html
        
        Потом сократить только до новой версии
        -->
        <for param="cdnversiondir">
            <dirset dir="${workspace.dir}/deploy/cdn/" includes="*"/>
            <sequential>
                <local name="versionname"/>
                <basename property="versionname" file="@{cdnversiondir}"/>

                <var name="filelist.var" value= "" />

                <for param="files">
                    <fileset dir="${workspace.dir}/deploy/cdn/${versionname}">
                        <include name="**/*.js"/>
                        <include name="**/*.css"/>
                        <exclude name="**/*_*.css"/>
                    </fileset>
                    <sequential>
                        <local name="file"/>
                        <local name="regfile"/>
                        <propertyregex property="regfile" input="@{files}" regexp=".*\\deploy\\cdn\\${versionname}\\(.*)" select="\1"/>

                        <script language="javascript">
                            <![CDATA[
                                project.setProperty( "file", project.getProperty("regfile").toString().split( "\\" ).join( "\\/" ));
                            ]]>
                        </script>

                        <!--propertyregex property="file" input="${regfile}" regexp="\\" replace="\\/" global="true"/-->

                        <var name="filelist.var" value= "${filelist.var}&lt;p&gt;&lt;a href=&quot;${file}&quot;&gt;${file}&lt;/a&gt;&lt;/p&gt;" />
                    </sequential>
                </for>

                <replaceregexp match="&lt;article&gt;(\s|\S)*&lt;\/article&gt;" replace="&lt;article&gt;${filelist.var}&lt;\/article&gt;" byline="true">
                    <fileset dir="${workspace.dir}/deploy/cdn/${versionname}/" includes="**/index.html"/>
                </replaceregexp>

            </sequential>
        </for>

        <!--if>
            <available file="${basedir}/release-notes.html"/>
            <then>
                <copy file="${basedir}/release-notes.html"
                      tofile="${build.dir}/release-notes.html"
                      overwrite="true"/>
            </then>
        </if-->
    </target>

    <target name="cdn" depends="init,init-version-properties">
        <x-echo>${workspace.dir}/deploy/cdn/${prg.version.full}</x-echo>

        <!-- 
        Получение обновленного списка версий
        -->
        <var name="filelist.var" value= "" />
        <for param="versiondir">
            <dirset dir="${workspace.dir}/deploy/cdn/" includes="*"/>
            <sequential>
                <local name="versionname"/>
                <basename property="versionname" file="@{versiondir}"/>
                <var name="filelist.var" value= "${filelist.var}&lt;p&gt;&lt;a href=&quot;../${versionname}/index.html&quot;&gt;${versionname}&lt;/a&gt;&lt;/p&gt;" />
                <copy file="${basedir}/cdn.html" tofile="${workspace.dir}/deploy/cdn/${versionname}/index.html" overwrite="true"/>
                <replaceregexp
                    file ="${workspace.dir}/deploy/cdn/${versionname}/index.html"
                    match="&lt;title&gt;(\s|\S)*&lt;\/title&gt;"
                    replace="&lt;title&gt;${versionname}&lt;\/title&gt;"
                    byline="true"/>
                <replaceregexp 
                    file ="${workspace.dir}/deploy/cdn/${versionname}/index.html"
                    match="&lt;header&gt;(\s|\S)*&lt;\/header&gt;" 
                    replace="&lt;header&gt;&lt;h1&gt;${versionname}&lt;\/h1&gt;&lt;\/header&gt;" 
                    byline="true"/>
            </sequential>
        </for>
        
        <!--
        Сортировка списка версий в обратном порядке
        -->
        <script language="javascript">
            <![CDATA[
                project.setProperty( "filelist", "<p>" + project.getProperty("filelist.var")
                    .toString().split( "</p><p>" ).reverse( ).join( "" ) + "</p>");
            ]]>
        </script>
        
        <!-- 
        Замена обновленного списка версий во всех index.html
        -->
        <replaceregexp match="&lt;aside&gt;(\s|\S)*&lt;\/aside&gt;" replace="&lt;aside&gt;${filelist}&lt;\/aside&gt;" byline="true">
            <fileset dir="${workspace.dir}/deploy/cdn/" includes="**/index.html"/>
        </replaceregexp>

        <for param="cdnversiondir">
            <dirset dir="${workspace.dir}/deploy/cdn/" includes="*"/>
            <sequential>
                <local name="versionname"/>
                <basename property="versionname" file="@{cdnversiondir}"/>
                
                <var name="filelist.var" value= "" />
                
                <for param="files">
                    <fileset dir="${workspace.dir}/deploy/cdn/${versionname}">
                        <include name="**/*.js"/>
                        <include name="**/*.css"/>
                        <exclude name="**/*_*.css"/>
                    </fileset>
                    <sequential>
                        <local name="file"/>
                        <local name="regfile"/>
                        <propertyregex property="regfile" input="@{files}" regexp=".*\\deploy\\cdn\\${versionname}\\(.*)" select="\1"/>

                        <script language="javascript">
                            <![CDATA[
                                project.setProperty( "file", project.getProperty("regfile").toString().split( "\\" ).join( "\\/" ));
                            ]]>
                        </script>

                        <!--propertyregex property="file" input="${regfile}" regexp="\\" replace="\\/" global="true"/-->
                        
                        <var name="filelist.var" value= "${filelist.var}&lt;p&gt;&lt;a href=&quot;${file}&quot;&gt;${file}&lt;/a&gt;&lt;/p&gt;" />
                    </sequential>
                </for>
                
                <replaceregexp match="&lt;article&gt;(\s|\S)*&lt;\/article&gt;" replace="&lt;article&gt;${filelist.var}&lt;\/article&gt;" byline="true">
                    <fileset dir="${workspace.dir}/deploy/cdn/${versionname}/" includes="**/index.html"/>
                </replaceregexp>

            </sequential>
        </for>

        <!--
        <var name="filelist.var" value= "" />
        <for param="files">
            <fileset dir="${workspace.dir}/deploy/cdn/${prg.version.full}">
                <include name="**/*.js"/>
                <include name="**/*.css"/>
                <exclude name="**/*_*.css"/>
            </fileset>
            <sequential>
                <local name="file"/>
                <propertyregex property="file" input="@{files}" regexp=".*\\deploy\\cdn\\${prg.version.full}\\(.*)" select="\1"/>
                <var name="filelist.var" value= "${filelist.var}&lt;p&gt;&lt;a href=&quot;${file}&quot;&gt;${file}&lt;/a&gt;&lt;/p&gt;" />
                <x-echo>${file}</x-echo>
            </sequential>
        </for>
        <property name="filelist" value= "${filelist.var}" />
        
        <x-echo>${filelist}</x-echo>
        <replaceregexp match="&lt;article&gt;(\s|\S)*&lt;\/article&gt;" replace="&lt;article&gt;${filelist}&lt;\/article&gt;" byline="true">
            <fileset dir="${workspace.dir}/deploy/cdn/${prg.version.full}/" includes="**/index.html"/>
        </replaceregexp>
        -->

    </target>
    
    <!--
    ******************************************************************
    Targets to easily run builds for specific items
    ******************************************************************
    -->

    <!--
    <target name="build-classic"
            description="Build the Classic Theme (needed by unit tests)"
            depends="init">
        <x-sencha-command dir="${package.dir}/classic/theme-classic" inheritall="false">
            package
                build
        </x-sencha-command>
    </target>

    <target name="build-crisp"
            description="Build the Crisp Theme"
            depends="init">
        <x-sencha-command dir="${package.dir}/classic/theme-crisp" inheritall="false">
            package
                build
        </x-sencha-command>
    </target>

    <target name="build-gray"
            description="Build the Gray Theme"
            depends="init">
        <x-sencha-command dir="${package.dir}/classic/theme-gray" inheritall="false">
            package
                build
        </x-sencha-command>
    </target>

    <target name="build-neptune"
            description="Build the Neptune Theme"
            depends="init">
        <x-sencha-command dir="${package.dir}/classic/theme-neptune" inheritall="false">
            package
                build
        </x-sencha-command>
    </target>

    <target name="build-triton"
            description="Build the Triton Theme"
            depends="init">
        <x-sencha-command dir="${package.dir}/classic/theme-triton" inheritall="false">
            package
                build
        </x-sencha-command>
    </target>

    <target name="themes"
            description="Build all theme packages"
            depends="build-neptune,build-crisp,build-triton,build-classic,build-gray"/>
    -->
    <!--
    ******************************************************************
    Targets used to produce deployment builds
    ******************************************************************
    -->
    <!--target name="-docs-init">
      <property name="version.notupgrade" value="true"/>  
    </target-->

    <!--
    **********************************************
    Сборка документации
    **********************************************
    -->
    <target name="docs" depends="init,load-version-properties,init-version-properties" description="Builds docs for SU packages">
        <x-echo>Generate docs version ${version.full}</x-echo>

        <property name="jsduck.config.dir" value="${workspace.dir}/docs"/>
        <property name="jsduck.output.dir" value="${workspace.dir}/deploy/docs"/>

        <mkdir dir="${jsduck.output.dir}/${prg.version.release}"/>
        <!--mkdir dir="${jsduck.output.dir}/${prg.version.release}/classic"/-->

        <x-echo>Classic</x-echo>
        <!-- Сборка в JsDuck-->
        <exec executable="jsduck.bat">
            <arg value="--output=${jsduck.output.dir}/${prg.version.release}/classic"/>
            <arg value="--config=${jsduck.config.dir}/classic.json"/>
        </exec>

        <!-- Копирование ExtJS для запуска online примеров -->
        <copy todir="${jsduck.output.dir}/${prg.version.release}/classic/extjs-build">
            <fileset dir="${jsduck.config.dir}/extjs-build-classic"/>
        </copy>

        <!-- Копирование SU для запуска online примеров -->
        <copy file="${workspace.packages.dir}/build/su-classic.js"
                todir="${jsduck.output.dir}/${prg.version.release}/classic/extjs-build"/>

        <copy file="${workspace.packages.dir}/build/resources/su-classic-all.css"
              todir="${jsduck.output.dir}/${prg.version.release}/classic/extjs-build/resources"/>

        <copy todir="${workspace.dir}/deploy">
            <fileset dir="${jsduck.config.dir}/html"/>
        </copy>


        <x-echo>Modern</x-echo>
        <!-- Сборка в JsDuck-->
        <exec executable="jsduck.bat">
            <arg value="--output=${jsduck.output.dir}/${prg.version.release}/modern"/>
            <arg value="--config=${jsduck.config.dir}/modern.json"/>
        </exec>

        <!-- Копирование ExtJS для запуска online примеров -->
        <copy todir="${jsduck.output.dir}/${prg.version.release}/modern/extjs-build">
            <fileset dir="${jsduck.config.dir}/extjs-build-modern"/>
        </copy>

        <!-- Копирование SU для запуска online примеров -->
        <copy file="${workspace.packages.dir}/build/su-modern.js"
                todir="${jsduck.output.dir}/${prg.version.release}/modern/extjs-build"/>

        <copy file="${workspace.packages.dir}/build/resources/su-modern-all.css"
              todir="${jsduck.output.dir}/${prg.version.release}/modern/extjs-build/resources"/>

        <!-- Копирование демострашек -->
        <copy todir="${jsduck.output.dir}/${prg.version.release}/examples">
            <fileset dir="${workspace.dir}/examples"/>
        </copy>

    </target>

    <!-- FIXME core should be the only package here, but we still have dependencies in the examples -->
    <property name="static.packages" value="core,amf,charts,soap"/>

    <target name="zip-impl" depends="init">
        <property name="staging.dir" value="${workspace.dir}/staging"/>
        <property name="display.version" value="${package.version}"/>
        <property name="folder.display.version" value="${display.version}"/>
        <property name="zip.display.version" value="${display.version}"/>
        <property name="ext.staging.dir" value="${staging.dir}/${package.name}-${folder.display.version}"/>
        <property name="ext.zip" value="${pkg.build.dir}/${package.name}-${zip.display.version}.zip"/>

        <delete dir="${staging.dir}"/>
        <delete file="${ext.zip}"/>

        <mkdir dir="${ext.staging.dir}"/>
        <unzip src="${pkg.build.dir}/${pkg.file.name}" dest="${ext.staging.dir}"/>
        <copy todir="${ext.staging.dir}">
            <fileset dir="${package.dir}" includes="examples/**/*,build/examples/**/*"/>
        </copy>
        <copy todir="${ext.staging.dir}">
            <fileset dir="${package.dir}" includes="examples/**/*,build/examples/**/*"/>
        </copy>
        <if>
            <equals arg1="${repo.dev.mode}" arg2="true"/>
            <then>
                <copy todir="${ext.staging.dir}/.sencha/workspace">
                    <fileset dir="${package.dir}/../deployment_workspace"
                             includes="**/*"/>
                </copy>
            </then>
        </if>

        <copy todir="${ext.staging.dir}">
            <fileset dir="${package.dir}"
                     includes="welcome/**/*,
                               build/**/*,
                               packages/core/test/specs*/**/*,
                               packages/core/test/resources/**/*,
                               packages/charts/test/specs*/**/*,
                               classic/classic/test/*.*,
                               classic/classic/test/resources/**/*,
                               classic/classic/test/local/**/*,
                               classic/classic/test/specs*/**/*,
                               modern/modern/test/*.*,
                               modern/modern/test/local/**/*,
                               modern/modern/test/specs*/**/*"/>
        </copy>
        <delete dir="${ext.staging.dir}/build/temp"/>
        <delete dir="${ext.staging.dir}/build/ext"/>

        <replace file="${ext.staging.dir}/examples/classic/shared/include-ext.js"
                 token="Ext.devMode = 2;"
                 value="Ext.devMode = 1;"/>

        <zip destfile="${su.zip}" basedir="${staging.dir}" level="9"/>
    </target>

    <target name="zip" depends="set-build-production,build,prep-build-folder,zip-impl"
            description="Build package and create distribution ZIP file">
    </target>

    <target name="sass-rebuild" depends="init" if="false">
        <x-process-sub-packages>
            <x-sub-build dir="@{pkg-dir}"
                         target="sass"
                         inherit-version="${build.subpkgs.inherit.version}"/>
        </x-process-sub-packages>
        <x-process-examples>
            <x-sencha-command dir="@{example-dir}" inheritall="false">
                app
                each
                ant
                sass
            </x-sencha-command>
        </x-process-examples>
    </target>

    <target name="quick-build" depends="init,js,prep-build-folder,pkg"/>

    <target name="zip-only" depends="quick-build,zip-impl">
    </target>

    <!--macrodef name="x-sandbox">
        <attribute name="file"/>
        <attribute name="outfile" default="@{file}"/>
        <attribute name="jsPrefix"/>
        <attribute name="cssPrefix"/>
        <sequential>
            <concat destfile="@{outfile}">
                <header trimleading="yes" filtering="no">
                    (function(Ext) {
                    Ext.sandboxName = '@{jsPrefix}';
                    Ext.isSandboxed = true;
                    Ext.buildSettings = { baseCSSPrefix: "@{cssPrefix}", scopeResetCSS: true };
                </header>
                <filelist files="@{file}"/>
                <footer trimleading="yes" filtering="no">
                    })(this.@{jsPrefix} || (this.@{jsPrefix} = {}));
                </footer>
            </concat>
        </sequential>
    </macrodef-->

    <!--
    ******************************************************************
    Targets for Test
    ******************************************************************
    -->
    <!--
    <target name="test-ext" depends="bootstrap,build-classic,test-run"/>

    <target name="test-all" depends="test-ext"/>

    <target name="coverage-run" depends="init">
        <x-sencha-command dir="${package.dir}">
            <![CDATA[
                config
                    -prop
                    cmd-test.specs.test-json=${package.dir}/test/specs/coverageTest.json
                    -prop
                    cmd-test.coverage.results.dir=${workspace.dir}/test/coverage-results
                then
                package
                    test
                        run
            ]]>
        </x-sencha-command>
    </target>

    <target name="coverage-report" depends="init">
        <x-shell dir="${workspace.dir}/test">
            node istanbul_report.js ${workspace.dir}/test/coverage-results ${workspace.dir}
        </x-shell>
    </target>

    <target name="coverage" depends="coverage-run,coverage-report"/>
    -->

</project>
